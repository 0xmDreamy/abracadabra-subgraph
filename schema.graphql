type LogDeploy @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  data: Bytes! # bytes
  cloneAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogDeposit @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogFlashLoan @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  feeAmount: BigInt! # uint256
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogRegisterProtocol @entity(immutable: true) {
  id: Bytes!
  protocol: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogSetMasterContractApproval @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  user: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyDivest @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyInvest @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyLoss @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyProfit @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyQueued @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategySet @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogStrategyTargetPercentage @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  targetPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogTransfer @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogWhiteListMasterContract @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogWithdraw @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type DegenBoxLogDeploy @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  data: Bytes! # bytes
  cloneAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogDeposit @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogFlashLoan @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  feeAmount: BigInt! # uint256
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogRegisterProtocol @entity(immutable: true) {
  id: Bytes!
  protocol: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogSetMasterContractApproval @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  user: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyDivest @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyInvest @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyLoss @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyProfit @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyQueued @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategySet @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogStrategyTargetPercentage @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  targetPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogTransfer @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogWhiteListMasterContract @entity(immutable: true) {
  id: Bytes!
  masterContract: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxLogWithdraw @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  share: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DegenBoxOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
